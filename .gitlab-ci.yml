variables:
  DOCKER_IMAGE_DOCKER: docker:stable-dind
  NAME_LATEST_TAG: latest
  NAME_DEVELOP_TAG: develop

image: $DOCKER_IMAGE_DOCKER

stages:
  - build
  - sonarqube-check
  - tag-develop
  - tag-master
  - deploy-develop
  - deploy-master

services:
  - docker:dind

#before_script:
  # $CI_JOB_TOKEN, a special token provided by GitLab
  #- echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

# Build image for every commit
Build:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE:$NAME_DEVELOP_TAG || true
    # The built image is tagged locally with the commit SHA
    - >
      docker build
      --pull
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --cache-from $CI_REGISTRY_IMAGE:$NAME_DEVELOP_TAG
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA


Sonarqube:
  stage: sonarqube-check
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  services:
  - docker:dind
  variables:
    # Defines the location of the analysis task cache
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    # Tells git to fetch all the branches of the project, required by the analysis task
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.login="$SONARQUBE_TOKEN"
  allow_failure: true
  only:
    - merge_requests
    - develop
    - master

Tag develop:
  stage: tag-develop
  variables:
    GIT_STRATEGY: fetch
  only:
    - develop
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Tag it "develop"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$NAME_DEVELOP_TAG
    - docker push $CI_REGISTRY_IMAGE:$NAME_DEVELOP_TAG

Tag master:
  stage: tag-master
  variables:
    # Again, we do not need the source code here. Just playing with Docker.
    GIT_STRATEGY: fetch
  only:
    - tags
    - master
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Tag it with the latest tag
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    # Tag it latest for the latest master commit
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$NAME_LATEST_TAG
    - docker push $CI_REGISTRY_IMAGE:$NAME_LATEST_TAG

# TODO implement
Deploy develop:
  stage: deploy-develop
  only:
    - develop
  script:
    - echo "Hello from develop deployment"

# TODO implement
Deploy master:
  stage: deploy-master
  only:
    - master
  script:
    - echo "Hello from master deployment"
